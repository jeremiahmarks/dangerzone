# @Author: Jeremiah Marks
# @Date:   2014-03-27 19:28:47
# @Last Modified by:   Jeremiah Marks
# @Last Modified time: 2014-03-27 20:18:14

Notes on bash
################################################################################
####
####    Special Characters
####
################################################################################

# 	Generally begins a comment, 
	also used in 
		parameter substitution 
		converting to different bases. 

;	Ends one command on a line and allows another command to begin.
		requires a space after

;;	double semicolon : terminates a case option

. 	Bash built in equivalent to source
	before filename: indicates a hidden file
	single dot in directory: current working directory
	double dot in directory: directory above cwd
	regex: matches a single char

""	partial quoting: preserves most of the special chars

''	full quoting: preserves all of the special chars

, 	links together a series of arithmetic operations. All are evaluated, but 
	only the last one is returned.
	EX:
		let "t2 = ((a = 9, 15 / 3))"
		# results in a=9 and t2=15/3
	can also concat strings
	EX:
		for file in /{,usr/}bin/*calc
		#             ^    Find all executable files ending in "calc"
		#+                 in /bin and /usr/bin directories.

\	typical escape char

/ 	filename path seperator
	also serves as division operator

`	makes the output of `command` available for assignment to variable
	known as:
		backtick
		backquotes
		command substitution

:	NULL command, synonym for "true"
	Placeholder in if/then, EX:
		if true
		then : #does nothing, similar to pass in python.
	if used with ouput redirect:
		: > data.txt #if data.txt does not exist, creates it. if it exists, clears it out
	Placeholder in an empty function (again think of pass in python)

!	"not"
	also can invoke history from the command line

*	wildcard
	multiplication

**	exponents
	extended file-match globbing

?	trinary operator (condition?result-if-true:result-if-false) EX
		(( var0 = var1<98?9:21 ))
		#                ^ ^

		# if [ "$var1" -lt 98 ]
		# then
		#   var0=9
		# else
		#   var0=21
		# fi
	tests whether a variable has been set
	single character wildcard

$ 	variable substitution, returns the contents of the variable
	EOL in regex

${}	Parameter substitution

$'.'expands single or multiple escaped octal or hex values into ASCII [18] 
	or Unicode characters

$*	positional parameter

$@	positional parameter

$? exit status variable

$$	pid variable

()	command group: processes contents in a subshell
	array initialization

{xxx,yyy,zzz,...}
	Brace expansion
	No spaces allowed within the braces unless the spaces are quoted or escaped.
	EX's:

		echo \"{These,words,are,quoted}\"   # " prefix and suffix
		# "These" "words" "are" "quoted"
		cat {file1,file2,file3} > combined_file
		# Concatenates the files file1, file2, and file3 into combined_file.
		cp file22.{txt,backup}
		# Copies "file22.txt" to "file22.backup"

{a..z}
	Extended Brace expansion. EX:
		echo {a..z} # a b c d e f g h i j k l m n o p q r s t u v w x y z
		# Echoes characters between a and z.
		echo {0..3} # 0 1 2 3
		# Echoes characters between 0 and 3.
		base64_charset=( {A..Z} {a..z} {0..9} + / = )
		# Initializing an array, using extended brace expansion.
		# From vladz's "base64.sh" example script.	

{}
	Block of code [curly brackets]. Also referred to as an inline group, this 
		construct, in effect, creates an anonymous function (a function without a 
		name). However, unlike in a "standard" function, the variables inside a 
		code block remain visible to the remainder of the script.
	Unlike a command group within (parentheses), as above, a code block enclosed
		by {braces} will not normally launch a subshell. 

[]	test expression between []
	Used to denote element in array
	in regex delineates a range of characters

[[]]
	Test expression between [[ ]]. More flexible than the single-bracket [ ] 
	test, this is a shell keyword.
	Using the [[ ... ]] test construct, rather than [ ... ] can prevent many 
	logic errors in scripts. For example, the &&, ||, <, and > operators work 
	within a [[ ]] test, despite giving an error within a [ ] construct.

(())
	Evaluate expression between (())

>	redirects and overwrites output to filename

&>	redirects and overwrites output and stderr to filename

>>	redirects and appends output to filename

<
>
	ascii comparison

/<
/>
	regex: word boundries

|	pipe, chains commands together
	The stdout of each process in a pipe must be read as the stdin of the next. 
	A pipe runs as a child process, and therefore cannot alter script variables.

>|	force redirection: dorcibly overwrites existing file.

||	OR

&	run job in background

&&	AND
	causes a return of 0 (success) only if both the linked test conditions are true.

~+
	current working directory. This corresponds to the $PWD internal variable.

~-
	previous working directory. This corresponds to the $OLDPWD internal variable.

