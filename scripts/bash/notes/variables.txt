# @Author: Jeremiah Marks
# @Date:   2014-03-27 20:26:42
# @Last Modified by:   Jeremiah Marks
# @Last Modified time: 2014-03-27 22:44:55

No space permitted on either side of = sign when initializing variables.


only times a variable appears without the $ prefix
	declared or assigned
	 when unset
	 when exported
	 in an arithmetic expression within double parentheses (( ... ))
	 or in the special case of a variable representing a signal

double quotes (" ... ") does not interfere with variable substitution
 	"partial quoting" or "weak quoting"

single quotes ('...') causes the variable name to be used literally: no sub will take place
	"full quoting" or strong quoting

$variable is actually a simplified form of ${variable}. 
	In contexts where the $variable syntax causes an error, the longer form may work

hello="A B  C   D"
echo $hello   # A B C D
echo "$hello" # A B  C   D
# As we see, echo $hello   and   echo "$hello"   give different results.

echo '$hello'  # $hello

Note that = can be either an assignment or a test operator, depending on context.
####	
####	
####	a=123456789123
####	b=${a/23/ab} 
####	#this uses http://www.faqs.org/docs/abs/HTML/parameter-substitution.html#EXPREPL1
####	echo $b 	# 1ab456789123
####	
################################################################################
################################################################################
##
## Positional variables
##
################################################################################
################################################################################

$0, $1, $2 ... ${10}, ${11} are all positional variables

$0 denotes the name of the script. 

$* and $@ denote all of the positional parameters. 

to reference the last variable:
	args=$#           # Number of args passed.
	lastarg=${!args}  # Note that lastarg=${!$#} doesn't work.

