def one(starth=0, startpos=(0,0), lm=None, cube=60):
    if not lm:
        lm=MyTurtle()
    lm.ht()
    #lm.tracer(False)
    lm.pu()
    lm.goto(startpos)
    lm.seth(starth)
    unit=float(cube)/12
    lm.pd()
    lm.fd(6*unit)
    lm.right(90)
    lm.fd(unit)
    lm.right(90)
    lm.fd(2*unit)
    lm.left(90)
    lm.fd(10*unit)
    lm.left(90)
    lm.fd(2*unit)
    lm.right(90)
    lm.fd(unit)
    lm.right(90)
    lm.fd(6*unit)
    lm.right(90)
    lm.fd(unit)
    lm.right(90)
    lm.fd(2*unit)
    lm.left(90)
    lm.fd(10*unit)
    lm.left(90)
    lm.fd(2*unit)
    lm.right(90)
    lm.fd(unit)

def five(starth=0, startpos=(0,0), lm=None, cube=60):
    if not lm:
        lm=MyTurtle()
    lm.ht()
    #lm.tracer(False)
    lm.pu()
    lm.goto(startpos)
    lm.seth(starth)
    lm.pd()
    unit=float(cube)/12
    innertheta=math.degrees(math.asin((2*unit)/(((2*unit)**2+(5*unit)**2)**0.5)))
    innerdistance=(((2*unit)**2+(5*unit)**2)**0.5)
    outtertheta=math.degrees(math.asin((10*unit)/(((10*unit)**2+(3*unit)**2)**0.5)))
    outterdistance=(((10*unit)**2+(3*unit)**2)**0.5)
    lm.fd(4*unit)
    lm.pu()
    lm.right(90)
    lm.fd(unit)
    lm.pd()
    lm.seth(lm.heading()+innertheta)
    lm.fd(innerdistance)
    lm.seth(starth+(90-innertheta))
    lm.fd(innerdistance)
    lm.seth(starth+180)
    lm.fd(4*unit)
    lm.pu()
    lm.right(90)
    lm.fd(unit)
    lm.pd()
    lm.right(90)
    lm.fd(8*unit)
    lm.right(90)
    lm.fd(unit)
    lm.right(90)
    lm.fd(2*unit)
    lm.left(90-outtertheta)
    lm.fd(outterdistance)
    lm.seth(starth)
    lm.fd(5*unit)
    lm.right(90)
    lm.fd(unit)
    lm.right(90)
    lm.fd(12*unit)
    lm.right(90)
    lm.fd(unit)
    lm.right(90)
    lm.fd(5*unit)
    lm.seth(starth+90+innertheta)
    lm.fd(2*innerdistance)
    lm.seth(starth+180)
    lm.fd(2*unit)
    lm.right(90)
    lm.fd(unit)
    
    
def ten(starth=0, startpos=(0,0), lm=None, cube=60):
    if not lm:
        lm=MyTurtle()
    lm.ht()
    #lm.tracer(False)
    lm.pu()
    lm.goto(startpos)
    lm.seth(starth)
    lm.pd()
    unit=float(cube)/12    
    theta=math.degrees(math.asin(25.0/((15.0**2+25.0**2)**0.5)))
    upandright=starth+theta
    downandright=starth-theta
    upandleft=(180+starth)-theta
    downandleft=(180+starth)+theta
    outterxlengths=((3*unit)**2+(5*unit)**2)**0.5
    innerxlengths=(2.0/3.0)*outterxlengths
    ##All the math is done, lets draw!
    lm.fd(4*unit)
    lm.pu()
    lm.right(90)
    lm.fd(unit)
    lm.pd()
    lm.seth(downandright)
    lm.fd(innerxlengths)
    lm.seth(upandright)
    lm.fd(innerxlengths)
    lm.seth(180+starth)
    lm.fd(4*unit)
    lm.pu()
    lm.right(90)
    lm.fd(unit)
    lm.pd()
    lm.right(90)
    lm.fd(8*unit)
    lm.right(90)
    lm.fd(unit)
    lm.right(90)
    lm.fd(2*unit)
    lm.seth(downandleft)
    lm.fd(outterxlengths)
    lm.seth(downandright)
    lm.fd(outterxlengths)
    lm.seth(starth)
    lm.fd(2*unit)
    lm.right(90)
    lm.fd(unit)
    lm.right(90)
    lm.fd(4*unit)
    lm.pu()
    lm.right(90)
    lm.fd(unit)
    lm.pd()
    lm.seth(upandleft)
    lm.fd(innerxlengths)
    lm.seth(downandleft)
    lm.fd(innerxlengths)
    lm.seth(starth)
    lm.fd(4*unit)
    lm.pu()
    lm.right(90)
    lm.fd(unit)
    lm.pd()
    lm.right(90)
    lm.fd(8*unit)
    lm.right(90)
    lm.fd(unit)
    lm.right(90)
    lm.fd(2*unit)
    lm.seth(upandright)
    lm.fd(outterxlengths)
    lm.seth(upandleft)
    lm.fd(outterxlengths)
    lm.seth(180-starth)
    lm.fd(2*unit)
    lm.right(90)
    lm.fd(unit)


def fifty(starth=0, startpos=(0,0), lm=None, cube=60):
    if not lm:
        lm=MyTurtle()
    lm.ht()
    #lm.tracer(False)
    lm.pu()
    lm.goto(startpos)
    lm.seth(starth)
    unit=float(cube)/12
    lm.pd()
    lm.fd(2*unit)
    lm.right(90)
    lm.fd(10*unit)
    lm.left(90)
    lm.fd(3*unit)
    lm.left(45)
    lm.fd((2*(unit**2))**0.5)
    lm.right(135)
    lm.fd(3*unit)
    lm.right(90)
    lm.fd(6*unit)
    lm.right(90)
    lm.fd(12*unit)




